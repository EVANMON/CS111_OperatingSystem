# NAME: Zhonglin Zhang
# EMAIL: evanzhang@ucla.edu
# ID: 005030520

Project 2B

To run this program, you can use Makefile directly, like :
make default: build all the executable files
make tests: run the specific shell script to test specified test cases
make profile: run tests with gperftools
make graphs: use the tests results to plot graphs
make dist: generate tarball (this command includs all the functions of default, tests and graphs)
make clean: clear the generated files

QUESTIONS:

> Q 2.3.1 
> Where do you believe most of the cycles are spent in the 1 and 2-thread list tests ? Why do you believe these to be the most expensive parts of the code?

   I think the most cycles are just spent on the operations of the list, like insertion and deleting. Cause if there are just 1 or 2 threads, the competition condition is not very serious. Less time would be wasted on the waiting for the lock.

> Where do you believe most of the time/cycles are being spent in the high-thread spin-lock tests? Where do you believe most of the time/cycles are being spent in the high-thread mutex tests?

   For high-thread spin-lock, more time would be spent on while-loop spinning. For mutex, it would be spent on blocking threads and context switches.

> Q 2.3.2
> Where (what lines of code) are consuming most of the cycles when the spin-lock version of the list exerciser is run with a large number of threads?

   The spinning consumes the most of cycles. 

> Why does this operation become so expensive with large numbers of threads?

   With large number of threads, the competition for one sublist is very common. And spin-lock needs to repeatedly test the lock variables and wastes a lot of CPU.

> Q 2.3.3
> Look at the average time per operation (vs. # threads) and the average wait-for-mutex time (vs. #threads).
> Why does the average lock-wait time rise so dramatically with the number of contending threads?

   Cause the more the number of threads is, the more possible multiple threads compete for one same sublist to do the operations. So lock-wait time would rise dramatically.   

> Why does the completion time per operation rise (less dramatically) with the number of contending threads?
   
   Because here we use the wall time, the total real time used for the the whole process. When some threads wait for the lock, other threads are running the operations. So the part of lock-wait is not obvious in the whole wall time. So the average operation time rises less dramatically.

> How is it possible for the wait time per operation to go up faster (or higher) than the completion time per operation?

   As I explained, because the completion time per operation is wall time and wait time is the sum of time for each thread. So it is possible that multiple threads are waiting for the lock at the same time and wait time would include all these times together while completion time just takes the real "external" time into account. Then it is possible for the wait time to go up faster than the completion time. 

> Q 2.3.4
> Explain the change in performance of the synchronized methods as a function of the number of lists.

   There is an improvement in performance as the number of lists increases. Because at the beginning, as the number of threads increases, the number of element in each sublist becomes smaller and the competition condition becomes less obvious.

> Should the throughput continue increasing as the number of lists is further increased? If not, explain why not.

   It depends on the hardware, specifically the number of cores in CPU. When the performance achieves the upper bound, when all the CPU's are engaged although there are no competitions for the lock, the performance could not increase anymore.

> It seems reasonable to suggest the throughput of an N-way partitioned list should be equivalent to the throughput of a single list with fewer (1/N) threads. Does this appear to be true in the above curves? If not, explain why not.

   No. Because for N-way partitioned list, we also have N locks while for one single list, we just have one lock. So the competition condition in the latter case is more serious than the former.