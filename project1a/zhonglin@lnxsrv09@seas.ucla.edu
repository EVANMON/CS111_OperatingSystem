// Project 1A
// NAME: Zhonglin Zhang
// EMAIL: evanzhang@ucla.edu
// ID: 005030520

#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>
#include <getopt.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>
#include <signal.h>
#include <termios.h>
#include <sys/types.h>
#include <poll.h>
#define keyboard_fd STDIN_FILENO
#define BUF_SIZE 256

static struct termios origTermMode;

int termModeReset(void) {
    if (tcsetattr(keyboard_fd, TCSANOW, &origTermMode) < 0) return -1;
    return 0;
}

void term_atexit(void) {
    termModeReset();
}

void nonCanonicalSet(void) {
    struct termios non_canonical;
    non_canonical = origTermMode;
    non_canonical.c_iflag = ISTRIP; /* only lower 7 bits    */
    non_canonical.c_oflag = 0;      /* no processing    */
    non_canonical.c_lflag = 0;      /* no processing    */ 
    non_canonical.c_cc[VMIN] = 1;
    non_canonical.c_cc[VTIME] = 0;
    if (tcsetattr(keyboard_fd, TCSANOW, &non_canonical) < 0) {
        fprintf(stderr, "%s\n", "Non-Canonical Mode Setting Error!");
        exit(1);
    }
}

void termModeSet(void) {
    if (!isatty(keyboard_fd)) {
        fprintf(stderr, "Error: %d is not a terminal!\n", keyboard_fd);
        exit(1);
    }
    else {
        if (tcgetattr(keyboard_fd, &origTermMode) < 0) {
            fprintf(stderr, "%s\n", "tcgetattr error!");
            exit(1);
        }
        if (atexit(term_atexit) != 0) {
            fprintf(stderr, "%s\n", "atexit error!");
            exit(1);
        }
        nonCanonicalSet();
    }
}

int main(int argc, char *argv[]) {
    termModeSet();
    int opt = 0;
    char map_buffer[2] = {'\r', '\n'};
    char shell_buffer[1] = {'\n'};
    char buffer[BUF_SIZE];
    ssize_t ret_in;
    int i;
    int shell = 0;

    static struct option long_options[] = {
    {"shell",    no_argument,       NULL,   1},
    {0,          0,                 0,      0}
    };
    while(1) {
        int option_index = 0;
        opt = getopt_long(argc, argv, "", long_options, &option_index);
        fprintf(stderr, "%d\n", opt);
        if (opt == -1) break;
        switch (opt) {
            case 1:
                shell = 1;
                break;
            default:
                fprintf(stderr, "%s\n", "Unknown Options!");
                termModeReset();
                exit(1);
        }
    }
    if (shell == 0) {
        while(1) {
            ret_in = read(keyboard_fd, buffer, BUF_SIZE);
            for (i=0; i<ret_in; ++i) {
                if (buffer[i] == '\r' || buffer[i] == '\n') {
                    write(STDOUT_FILENO, &map_buffer, (ssize_t) 2);
                }
                else if (buffer[i] == 0x4) {
                    termModeReset();
                    exit(0);
                }
                else
                    write(STDOUT_FILENO, &buffer, (ssize_t) 1); //??????
            }
        }
    } else {
        int pipefd1[2], pipefd2[2];
        char buffer[BUF_SIZE];
        pid_t cpid;
        int ret;
        if (pipe(pipefd1) < 0 || pipe(pipefd2) < 0) {
            fprintf(stderr, "%s\n", "pipe error!");
            exit(1);
        }
        cpid = fork();
        if (cpid == -1) {
            fprintf(stderr, "%s\n", "fork error!");
            exit(1);
        }

        // Child Process
        if (cpid == 0) {
            close(pipefd1[1]);
            close(pipefd2[0]);
            dup2(pipefd1[0], STDIN_FILENO);
            dup2(pipefd2[1], STDOUT_FILENO);
            dup2(pipefd2[1], STDERR_FILENO);
            close(pipefd1[0]);
            close(pipefd2[1]);
            char *cmd = "/bin/bash";
            char *argv[2];
            argv[0] = "/bin/bash";
            argv[1] = NULL;
            if (execvp(cmd, argv) < 0) {
                fprintf(stderr, "%s\n", "execvp error!");
                exit(1);
            }
        }
        // Parent Process
        else {
            int status;
            pid_t w;
            struct pollfd fds[2];
            close(pipefd1[0]);
            close(pipefd2[1]);
            fds[0].fd = STDIN_FILENO;
            fds[0].events = POLLIN | POLLHUP | POLLERR;
            fds[1].fd = pipefd2[0];
            fds[1].events = POLLIN | POLLHUP | POLLERR;
            while(1) {
                ret = poll(fds, 2, 0);
                if (ret > 0) {
                    if (fds[0].revents & POLLIN) {
                        ret_in = read(STDIN_FILENO, &buffer, BUF_SIZE);
                        for (i=0; i<ret_in; ++i) {
                            if (buffer[i] == '\r' || buffer[i] == '\n') {
                                write(STDOUT_FILENO, &map_buffer, (ssize_t) 2);
                                write(pipefd1[1], &shell_buffer, (ssize_t) 1);
                            }
                            else if (buffer[i] == 0x03) {
                                printf("%s\n", "^C");
                                kill(cpid, SIGINT);
                                exit(0);
                            }
                            else if (buffer[i] == 0x4) {
                                printf("%s\n", "^D");
                                close(pipefd1[1]);
                                termModeReset();
                                exit(0);
                            }
                            else {
                                write(STDOUT_FILENO, &buffer, (ssize_t) 1);
                                write(pipefd1[1], &buffer, (ssize_t) 1);
                            }
                        }
                    } else if (fds[1].revents & POLLIN) {
                        ret_in = read(pipefd2[0], buffer, 1);
                        for (i=0; i<ret_in; ++i) {
                            if (buffer[i] == '\n') {
                                write(STDOUT_FILENO, &map_buffer, (ssize_t) 2);
                            }
                            else 
                                write(STDOUT_FILENO, &buffer, (ssize_t) 1);
                        }
                    } else if (fds[1].revents & POLLHUP || fds[1].revents & POLLERR) {
                        close(pipefd1[1]);
                        w = waitpid(cpid, &status, 0);
                        if (w == -1) {
                            fprintf(stderr, "%s\n", "waitpid error!");
                            exit(1);
                        }
                        else {
                            fprintf(stderr, "SHELL EXIT SIGNAL=%d STATUS=%d\n", WTERMSIG(status), WEXITSTATUS(status));
                            close(pipefd2[0]);
                            termModeReset();
                            exit(0);
                        }
                        exit(0);
                    } else if (fds[0].revents & POLLHUP || fds[0].revents & POLLERR) {
                        kill(cpid, SIGINT);
                        termModeReset();
                        exit(1);
                    }
                }
            }
        }
    }

}